================Solution1=================
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for indx in range(len(nums)):
            little = target - nums[indx]
            if little in nums and nums.index(little) != indx:
                indx2 = nums.index(little)
                break
        return [indx,indx2]
=======================================
Result:
Time: 1648 ms (24.89%)
Space: 14.9MB (5.62%)
=======================================
Boarder：
没有考虑0=0+0以及负数的情况
================Solution2=================
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        nums_hash = {} 
        nums_len = len(nums)
        for i in range(nums_len):
            dif = target - nums[i]
            if dif in nums_hash: 
                return [nums_hash[dif], i]
            nums_hash[nums[i]] = i
=======================================
Result:
Time: 76 ms (68.11%)
Space: 14.8MB (6.08%)
=======================================
Boarder：
如果先建hashmap会耗时更多